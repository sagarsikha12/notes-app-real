import type { serialize as serializeFn, deserialize as deserializeFn, calculateObjectSize as calculateObjectSizeFn } from 'bson';
/** @internal */
export declare const deserialize: typeof deserializeFn;
/** @internal */
export declare const serialize: typeof serializeFn;
/** @internal */
export declare const calculateObjectSize: typeof calculateObjectSizeFn;
export { Long, Binary, ObjectId, Timestamp, Code, MinKey, MaxKey, Decimal128, Int32, Double, DBRef, BSONRegExp, BSONSymbol, Map, Document } from 'bson';
import type { DeserializeOptions, SerializeOptions } from 'bson';
/**
 * BSON Serialization options.
 * @public
 */
export interface BSONSerializeOptions extends Omit<SerializeOptions, 'index'>, Omit<DeserializeOptions, 'evalFunctions' | 'cacheFunctions' | 'cacheFunctionsCrc32' | 'allowObjectSmallerThanBufferSize' | 'index'> {
    /** Return BSON filled buffers from operations */
    raw?: boolean;
}
export declare function pluckBSONSerializeOptions(options: BSONSerializeOptions): BSONSerializeOptions;
/**
 * Merge the given BSONSerializeOptions, preferring options over the parent's options, and
 * substituting defaults for values not set.
 *
 * @internal
 */
export declare function resolveBSONOptions(options?: BSONSerializeOptions, parent?: {
    bsonOptions?: BSONSerializeOptions;
}): BSONSerializeOptions;
//# sourceMappingURL=bson.d.ts.map