"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkInterrupted = exports.InterruptFlag = exports.MongoshInterruptedError = void 0;
const errors_1 = require("@mongosh/errors");
const events_1 = require("events");
const interruptEvent = 'interrupted';
const kUncatchable = Symbol.for('@@mongosh.uncatchable');
class MongoshInterruptedError extends errors_1.MongoshBaseError {
    constructor() {
        super('MongoshInterruptedError', 'execution was interrupted');
        this[_a] = true;
    }
}
exports.MongoshInterruptedError = MongoshInterruptedError;
_a = kUncatchable;
class InterruptFlag {
    constructor() {
        this.interrupted = false;
        this.onInterrupt = new events_1.EventEmitter();
        this.onInterrupt.setMaxListeners(Infinity);
    }
    isSet() {
        return this.interrupted;
    }
    async checkpoint() {
        if (this.interrupted) {
            await this.asPromise().promise;
        }
    }
    asPromise() {
        if (this.interrupted) {
            return {
                destroy: () => { },
                promise: Promise.reject(new MongoshInterruptedError())
            };
        }
        let destroy;
        const promise = new Promise((_, reject) => {
            destroy = () => {
                this.onInterrupt.removeListener(interruptEvent, reject);
                reject(null);
            };
            this.onInterrupt.once(interruptEvent, reject);
        });
        return {
            destroy: destroy,
            promise
        };
    }
    set() {
        this.interrupted = true;
        this.onInterrupt.emit(interruptEvent, new MongoshInterruptedError());
    }
    reset() {
        this.interrupted = false;
    }
}
exports.InterruptFlag = InterruptFlag;
function checkInterrupted(internalState) {
    var _b;
    if ((_b = internalState === null || internalState === void 0 ? void 0 : internalState.interrupted) === null || _b === void 0 ? void 0 : _b.isSet()) {
        throw new MongoshInterruptedError();
    }
    return internalState === null || internalState === void 0 ? void 0 : internalState.interrupted;
}
exports.checkInterrupted = checkInterrupted;
//# sourceMappingURL=interruptor.js.map