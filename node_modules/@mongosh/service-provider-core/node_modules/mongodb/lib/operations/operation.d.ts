import { ReadPreference, ReadPreferenceLike } from '../read_preference';
import type { ClientSession } from '../sessions';
import { Document, BSONSerializeOptions } from '../bson';
import type { MongoDBNamespace, Callback } from '../utils';
import type { Server } from '../sdam/server';
export declare const Aspect: {
    readonly READ_OPERATION: symbol;
    readonly WRITE_OPERATION: symbol;
    readonly RETRYABLE: symbol;
    readonly EXPLAINABLE: symbol;
    readonly SKIP_COLLATION: symbol;
};
/** @public */
export declare type Hint = string | Document;
export interface OperationConstructor extends Function {
    aspects?: Set<symbol>;
}
/** @public */
export interface OperationOptions extends BSONSerializeOptions {
    /** Specify ClientSession for this command */
    session?: ClientSession;
    willRetryWrites?: boolean;
    /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */
    readPreference?: ReadPreferenceLike;
}
/** @internal */
declare const kSession: unique symbol;
/**
 * This class acts as a parent class for any operation and is responsible for setting this.options,
 * as well as setting and getting a session.
 * Additionally, this class implements `hasAspect`, which determines whether an operation has
 * a specific aspect.
 * @internal
 */
export declare abstract class AbstractOperation<TResult = any> {
    ns: MongoDBNamespace;
    cmd: Document;
    readPreference: ReadPreference;
    server: Server;
    fullResponse?: boolean;
    bsonOptions?: BSONSerializeOptions;
    options: Document;
    [kSession]: ClientSession;
    constructor(options?: OperationOptions);
    abstract execute(server: Server, session: ClientSession, callback: Callback<TResult>): void;
    hasAspect(aspect: symbol): boolean;
    get session(): ClientSession;
    get canRetryRead(): boolean;
    get canRetryWrite(): boolean;
}
export declare function defineAspects(operation: OperationConstructor, aspects: symbol | symbol[] | Set<symbol>): Set<symbol>;
export {};
//# sourceMappingURL=operation.d.ts.map