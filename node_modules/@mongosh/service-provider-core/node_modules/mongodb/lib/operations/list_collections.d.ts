import { CommandOperation, CommandOperationOptions } from './command';
import { Callback } from '../utils';
import type { Document } from '../bson';
import type { Server } from '../sdam/server';
import type { Db } from '../db';
import { AbstractCursor } from '../cursor/abstract_cursor';
import type { ClientSession } from '../sessions';
import { ExecutionResult } from './execute_operation';
/** @public */
export interface ListCollectionsOptions extends CommandOperationOptions {
    /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */
    nameOnly?: boolean;
    /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */
    batchSize?: number;
}
/** @internal */
export declare class ListCollectionsOperation extends CommandOperation<string[]> {
    options: ListCollectionsOptions;
    db: Db;
    filter: Document;
    nameOnly: boolean;
    batchSize?: number;
    constructor(db: Db, filter: Document, options?: ListCollectionsOptions);
    execute(server: Server, session: ClientSession, callback: Callback<string[]>): void;
}
/** @public */
export declare class ListCollectionsCursor extends AbstractCursor {
    parent: Db;
    filter: Document;
    options?: ListCollectionsOptions;
    constructor(db: Db, filter: Document, options?: ListCollectionsOptions);
    clone(): ListCollectionsCursor;
    /** @internal */
    _initialize(session: ClientSession | undefined, callback: Callback<ExecutionResult>): void;
}
//# sourceMappingURL=list_collections.d.ts.map