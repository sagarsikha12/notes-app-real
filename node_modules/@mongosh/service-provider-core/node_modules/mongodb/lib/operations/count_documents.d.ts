import { AggregateOperation, AggregateOptions } from './aggregate';
import type { Callback } from '../utils';
import type { Document } from '../bson';
import type { Server } from '../sdam/server';
import type { Collection } from '../collection';
import type { ClientSession } from '../sessions';
/** @public */
export interface CountDocumentsOptions extends AggregateOptions {
    /** The number of documents to skip. */
    skip?: number;
    /** The maximum amounts to count before aborting. */
    limit?: number;
}
/** @internal */
export declare class CountDocumentsOperation extends AggregateOperation<number> {
    constructor(collection: Collection, query: Document, options: CountDocumentsOptions);
    execute(server: Server, session: ClientSession, callback: Callback<number>): void;
}
//# sourceMappingURL=count_documents.d.ts.map