import { CommandOperation, CommandOperationOptions } from './command';
import { Callback } from '../utils';
import type { Document } from '../bson';
import type { Server } from '../sdam/server';
import type { Db } from '../db';
import type { ClientSession } from '../sessions';
/** @public */
export declare type ListDatabasesResult = string[] | Document[];
/** @public */
export interface ListDatabasesOptions extends CommandOperationOptions {
    /** A query predicate that determines which databases are listed */
    filter?: Document;
    /** A flag to indicate whether the command should return just the database names, or return both database names and size information */
    nameOnly?: boolean;
    /** A flag that determines which databases are returned based on the user privileges when access control is enabled */
    authorizedDatabases?: boolean;
}
/** @internal */
export declare class ListDatabasesOperation extends CommandOperation<ListDatabasesResult> {
    options: ListDatabasesOptions;
    constructor(db: Db, options?: ListDatabasesOptions);
    execute(server: Server, session: ClientSession, callback: Callback<ListDatabasesResult>): void;
}
//# sourceMappingURL=list_databases.d.ts.map